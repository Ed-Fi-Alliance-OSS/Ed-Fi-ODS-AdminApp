# SPDX-License-Identifier: Apache-2.0
# Licensed to the Ed-Fi Alliance under one or more agreements.
# The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
# See the LICENSE and NOTICES files in the project root for more information.

name: Pack and Publish

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  release:
    types: [ published ]

env:
  ADMIN_APP_VERSION: '2.4'
  ADMIN_API_VERSION: '1.0'
  GA_MEASUREMENT_ID: ${{ secrets.GOOGLE_ANALYTICS_MEASUREMENT_ID}}
  ARTIFACTS_API_KEY: ${{ secrets.AZURE_ARTIFACTS_PERSONAL_ACCESS_TOKEN }}
  ARTIFACTS_FEED_URL: ${{ secrets.AZURE_ARTIFACTS_FEED_URL }}
  VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: '{"endpointCredentials": [{"endpoint": "${{ secrets.AZURE_ARTIFACTS_FEED_URL }}","password": "${{ secrets.AZURE_ARTIFACTS_PERSONAL_ACCESS_TOKEN }}"}]}'
  SBOM_NAME: "Admin-App-SBOM"
  MANIFEST_FILE: "_manifest/spdx_2.2/manifest.spdx.json"

jobs:
  pack:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
    outputs:
      hashes: ${{ steps.hashes.outputs.hashes }}

    steps:
    - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2

    - name: Setup .NET
      uses: actions/setup-dotnet@9211491ffb35dd6a6657ca4f45d43dfe6e97c829 # v2.0.0
      with:
        dotnet-version: 6.0.x

    - name: Publish
      run: |
        ./build.ps1 -Command BuildAndPublish `
            -Configuration Release `
            -Version ${{ env.ADMIN_APP_VERSION }} `
            -APIVersion ${{ env.ADMIN_API_VERSION }} `
            -BuildCounter ${{ github.run_number }}

##
## Temporarily comment out because running this job in a fork that doesn't have the right secrets setup.
##

    # - name: Populate Google Analytics ID
    #   run: .\build.ps1 -Command PopulateGoogleAnalyticsAppSettings -GoogleAnalyticsMeasurementId ${{env.GA_MEASUREMENT_ID}}

    - name: Pack
      if: success()
      run: |
        ./build.ps1 -Command Package -Version ${{ env.ADMIN_APP_VERSION }} `
            -Configuration Release  -BuildCounter ${{ github.run_number }}
        ./build.ps1 -Command PackageDatabase -Version ${{ env.ADMIN_APP_VERSION }} `
            -Configuration Release -BuildCounter ${{ github.run_number }}
        ./build.ps1 -Command PackageApi -Version ${{ env.ADMIN_API_VERSION }} `
            -Configuration Release  -BuildCounter ${{ github.run_number }}

    - name: Generate hashes for NuGet packages
      id: hashes
      shell: bash
      run:
        echo "::set-output name=hashes::$(sha256sum *.nupkg | base64 -w0)"

    - name: Upload Package
      if: success()
      uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535 # v3.0.0
      with:
        name: NuGetPackages
        path: ./*.nupkg
        if-no-files-found: error
        retention-days: 30

  sbom-create:
    runs-on: ubuntu-latest
    needs: pack
    permissions:
      actions: read
      id-token: write
      contents: write
    outputs:
      sbom-hash: ${{ steps.sbom-hash.outputs.sbom-hash }}
    steps:
      - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2

      - name: Get Artifacts
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 #v3.0.0
        with:
          name: NuGetPackages

      # TODO: separate Admin API and Admin App
      - name: Generate Software Bill of Materials (SBOM)
        shell: bash
        run: |
          curl -Lo $RUNNER_TEMP/sbom-tool https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-linux-x64 --silent
          chmod +x $RUNNER_TEMP/sbom-tool
          find ./*.nupkg  -printf "%f\n" > buildfilelist.txt
          mkdir manifest
          $RUNNER_TEMP/sbom-tool generate \
              -b ./ \
              -bl ./buildfilelist.txt \
              -bc ./Application/ \
              -pn AdminApp \
              -pv ${{ env.ADMIN_APP_VERSION }} \
              -nsb https://ed-fi.org \
              -m manifest \
              -ps "Ed-Fi Alliance"

      - name: Upload SBOM
        if: success()
        uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535 # v3.0.0
        with:
          name: ${{ env.SBOM_NAME }}
          path: ./manifest
          if-no-files-found: error
          retention-days: 30

      - name: Generate hashes for SBOM
        id: sbom-hash
        shell: bash
        run: |
          # sha256sum returns "<hashcode>  <name of file". Split that and return only the <hashcode>.
          sbom_hash=$(sha256sum ./manifest/${{ env.MANIFEST_FILE }} | awk '{split($0,a); print a[1]}')
          echo "::set-output name=sbom-hash::$sbom_hash"

  sbom-release:
    runs-on: ubuntu-latest
    needs: [sbom-create]
    permissions:
      actions: read
      contents: write
    #if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download the SBOM
        uses: slsa-framework/slsa-github-generator/.github/actions/secure-download-artifact@1d646d70aeba1516af69fb0ef48206580122449b
        with:
          name: ${{ env.SBOM_NAME }}
          path: ${{ env.MANIFEST_FILE }}
          sha256: "${{ needs.sbom-create.outputs.sbom-hash }}"

      - name: Upload to release
        uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5 # tag=v0.1.14
        id: release
        with:
          files: ${{ env.MANIFEST_FILE }}

#   provenance:
#     needs: pack
#     permissions:
#       actions: read
#       id-token: write
#       contents: write
#     uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.2.0
#     # This is failing :-(
#     # uses: ed-fi-alliance-sso/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.2.0
#     with:
#       base64-subjects: "${{ needs.pack.outputs.hashes }}"
#       # Set a custom name for the provenance attestation.
#       attestation-name: "multiple.intoto.jsonl"
#       # Upload provenance to a new release, if there is a new tag
#       upload-assets: true

## Questions about jsonl file
# 0. Correct to put all files into one sha256 hash?
# 1. Why an "l" when there's only one entry? Am I missing something?
# 2. How to decode?
# 3. Need to verify the output is what we expect



##
## Temporarily comment out so as to avoid accidental publishing in this spike
##

#   publish-artifacts:
#     needs: pack

#     runs-on: ubuntu-latest

#     defaults:
#       run:
#         shell: pwsh

#     steps:
#       - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2
#       - name: Get Artifact
#         uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 #v3.0.0
#         with:
#           name: NuGetPackages
#       - name: Install-credential-handler
#         run: iex "& { $(irm https://aka.ms/install-artifacts-credprovider.ps1) } -AddNetfx"
#       - name: Upload Admin API
#         run: |
#           $artifact = (Get-ChildItem -Path $_ -Name -Include EdFi.Suite3.ODS.Admin.Api.*.nupkg)
#           $arguments = @{
#             NuGetApiKey = "${{ env.ARTIFACTS_API_KEY }}"
#           }
#           $arguments.PackageFile = $artifact
#           ./build.ps1 Push @arguments
#       - name: Upload Admin App
#         run: |
#           $artifact = (Get-ChildItem -Path $_ -Name -Include EdFi.Suite3.ODS.AdminApp.Web.*.nupkg)
#           $arguments = @{
#             NuGetApiKey = "${{ env.ARTIFACTS_API_KEY }}"
#           }
#           $arguments.PackageFile = $artifact
#           ./build.ps1 Push @arguments
#       - name: Upload Admin Database
#         run: |
#           $artifact = (Get-ChildItem -Path $_ -Name -Include EdFi.Suite3.ODS.AdminApp.Database.*.nupkg)
#           $arguments = @{
#             NuGetApiKey = "${{ env.ARTIFACTS_API_KEY }}"
#           }
#           $arguments.PackageFile = $artifact
#           ./build.ps1 Push @arguments
