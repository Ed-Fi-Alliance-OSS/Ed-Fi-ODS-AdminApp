@*
SPDX-License-Identifier: Apache-2.0
Licensed to the Ed-Fi Alliance under one or more agreements.
The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
See the LICENSE and NOTICES files in the project root for more information.
*@

@using EdFi.Ods.AdminApp.Web.Helpers
@using EdFi.Ods.AdminApp.Web.Models.ViewModels.Application
@using HtmlTags.Extended.Attributes
@model EdFi.Ods.AdminApp.Web.Models.ViewModels.Application.EditApplicationViewModel

<div class="modal fade" id="add-application-modal" tabindex="-1" role="dialog" aria-labelledby="add-application-modal">
    <div class="modal-dialog modal-lg">
        <div class="modal-content" id="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title">Edit Application</h4>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("Edit", "Application"))
                {
                    @Html.ValidationBlock()
                    @Html.Input(m => m.VendorId).Hide()
                    @Html.Input(m => m.ApplicationId).Hide()
                    @Html.InputBlock(m => m.ApplicationName, "Application Name", "Name that identifies this application")

                    <div class="row">
                        <div class="col-xs-4 text-right">
                            @Html.Label("Education Organization Type:")
                        </div>
                        <div class="col-xs-6 margin-bottom-10">
                            @Html.InlineRadioButton(x => x.EducationOrganizationType, ApplicationEducationOrganizationType.LocalEducationAgency)
                        </div>
                        <div class="col-xs-2">
                            @Html.ToolTip("An application may only access one type of education organization at a time.")
                        </div>
                    </div>

                    @if (Model.TpdmEnabled)
                    {
                        <div class="row">
                            <div class="col-xs-6 col-xs-offset-4 margin-bottom-10">
                                @Html.InlineRadioButton(x => x.EducationOrganizationType, ApplicationEducationOrganizationType.PostSecondaryInstitution)
                            </div>
                        </div>
                    }

                    <div class="row">
                        <div class="col-xs-6 col-xs-offset-4 margin-bottom-10">
                            @Html.InlineRadioButton(x => x.EducationOrganizationType, ApplicationEducationOrganizationType.School)
                        </div>
                    </div>

                    @Html.MultiSelectListBlock(m => m.EducationOrganizationIds, Model.LocalEducationAgencies, cs => new SelectListItem { Selected = Model.EducationOrganizationIds.Contains(cs.EducationOrganizationId), Text = cs.Name, Value = cs.EducationOrganizationId.ToString() }, "Denotes which EdOrgs this application can access").Data("edorg-type", ApplicationEducationOrganizationType.LocalEducationAgency.Value).HideUnless(Model.EducationOrganizationType == ApplicationEducationOrganizationType.LocalEducationAgency)

                    @if (Model.TpdmEnabled)
                    {
                        @Html.MultiSelectListBlock(m => m.EducationOrganizationIds, Model.PostSecondaryInstitutions, cs => new SelectListItem { Selected = Model.EducationOrganizationIds.Contains(cs.EducationOrganizationId), Text = cs.Name, Value = cs.EducationOrganizationId.ToString() }, "Denotes which EdOrgs this application can access").Data("edorg-type", ApplicationEducationOrganizationType.PostSecondaryInstitution.Value).HideUnless(Model.EducationOrganizationType == ApplicationEducationOrganizationType.PostSecondaryInstitution)
                    }

                    @Html.MultiSelectListBlock(m => m.EducationOrganizationIds, Model.Schools, cs => new SelectListItem { Selected = Model.EducationOrganizationIds.Contains(cs.EducationOrganizationId), Text = cs.Name, Value = cs.EducationOrganizationId.ToString() }, "Denotes which EdOrgs this application can access").Data("edorg-type", ApplicationEducationOrganizationType.School.Value).HideUnless(Model.EducationOrganizationType == ApplicationEducationOrganizationType.School)

                    @Html.SelectListBlock(m => m.ClaimSetName, Model.ClaimSetNames, cs => new SelectListItem {Selected = Model.ClaimSetName == cs, Text = cs, Value = cs}, "Claims define the actions this application is allowed to perform")

                    <div class="advanced-option" style="display:none">
                        @Html.SelectListBlock(m => m.ProfileId, Model.Profiles, ps => new SelectListItem {Selected = Model.ProfileId == ps.ProfileId, Text = ps.ProfileName, Value = ps.ProfileId.ToString()}, includeBlankOption: true, helpTooltipText: "Optional. Used to implement data access policies within individual API resources. This is an advanced setting; please see the Ed-Fi ODS technical documentation for more detail.")
                    </div>

                    <div class="row">
                        <div class="col-xs-4"></div>
                        <div class="col-xs-8">
                            <div class="hides-elements" data-associated-elements="advanced-option" style="display: none">
                                <a href="#">Hide Advanced Options</a>
                            </div>
                            <div class="shows-elements" data-associated-elements="advanced-option">
                                <a href="#">Show Advanced Options</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                @Html.CancelModalButton()
                @Html.SaveButton("Save").AppendSpinner("add-app-spinner")
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    $(function () {
        var $edorgOptions = $("input[name='EducationOrganizationType']");
        $edorgOptions.change(function () {
            if ($(this).is(':checked')) {
                var edOrgType = $(this).val();
                ShowEdOrgSelectList(edOrgType);
            }
        });
    });

    function ShowEdOrgSelectList(edOrgType) {
        var $allEdOrgSelectLists = $("[data-edorg-type]");
        $allEdOrgSelectLists.hide();
        $allEdOrgSelectLists.find("select").prop("disabled", true);
        var $shownSelectList = $allEdOrgSelectLists.filter("[data-edorg-type='" + edOrgType + "']");
        $shownSelectList.find("select").prop("disabled", false);
        $shownSelectList.show();
    }
</script>
